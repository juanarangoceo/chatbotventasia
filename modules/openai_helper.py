import openai
import os
from dotenv import load_dotenv
from modules.config_loader import cargar_prompt
from modules.producto_helper import cargar_especificaciones_producto

# Cargar variables de entorno
load_dotenv()
api_key = os.getenv("OPENAI_API_KEY")

if not api_key:
    raise ValueError("‚ùå ERROR: No se encontr√≥ la API Key en el archivo .env")

client = openai.OpenAI(api_key=api_key)
config = cargar_prompt()
producto = cargar_especificaciones_producto()

def generar_respuesta_ia(mensaje, historial):
    """Genera una respuesta utilizando OpenAI con el contexto del producto y el historial de la conversaci√≥n."""
    try:
        if not config:
            return "‚ö†Ô∏è Error: No se pudo cargar la configuraci√≥n del chatbot."

        if "nombre" not in producto:
            return "‚ö†Ô∏è Error: No se pudo cargar la informaci√≥n del producto."

        print(f"üì° Enviando mensaje a OpenAI: {mensaje}")  # DEBUG

        response = client.chat.completions.create(
            model=config.get("modelo", "gpt-4"),
            messages=[
                {"role": "system", "content": f"Act√∫a como Juan, un asesor experto en caf√© y ventas de cafeteras."},
                {"role": "user", "content": mensaje}
            ],
            temperature=config.get("temperature", 0.7),
            max_tokens=100  # Reducido para respuestas m√°s concisas
        )
        
        respuesta = response.choices[0].message.content.strip()
        print(f"‚úÖ Respuesta de OpenAI: {respuesta}")  # DEBUG
        return respuesta

    except openai.OpenAIError as e:
        print(f"‚ùå ERROR en OpenAI: {str(e)}")
        return "‚ö†Ô∏è Lo siento, hay un problema con el sistema. ¬øC√≥mo puedo ayudarte con la cafetera?"

    except Exception as e:
        print(f"‚ùå ERROR inesperado en OpenAI: {str(e)}")
        return "‚ö†Ô∏è Lo siento, hubo un problema t√©cnico. ¬øTe gustar√≠a saber m√°s sobre la cafetera? ‚òï"
