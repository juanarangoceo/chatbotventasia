import json
import os
import time
import threading
from datetime import datetime, timedelta
from modules.producto_helper import cargar_especificaciones_producto  

PRODUCTO_JSON_PATH = os.path.join(os.getcwd(), "producto.json")

DATOS_CLIENTE = {}
ULTIMA_INTERACCION = {}  # Para rastrear el tiempo de la √∫ltima respuesta
PASO_CLIENTE = {}  # Para seguir el estado de la conversaci√≥n del cliente

GANCHOS = [
    "üí° ¬øTienes alguna duda sobre el producto? Estoy aqu√≠ para ayudarte.",
    "üì¶ ¬øTe gustar√≠a conocer m√°s sobre el env√≠o y tiempo de entrega?",
    "‚òï ¬øC√≥mo te gustar√≠a disfrutar tu caf√© con nuestra Cafetera Espresso Pro?",
    "üöÄ ¬°Aprovecha nuestra oferta especial! ¬øCu√°ntas unidades necesitas?"
]

def obtener_respuesta(mensaje, cliente_id):
    """Maneja el flujo de ventas y responde de forma estrat√©gica."""
    time.sleep(2)  # ‚è≥ Simulaci√≥n de retraso de respuesta
    mensaje = mensaje.lower().strip()

    # Actualizamos la √∫ltima interacci√≥n del usuario
    ULTIMA_INTERACCION[cliente_id] = datetime.now()

    if cliente_id not in PASO_CLIENTE:
        PASO_CLIENTE[cliente_id] = 1  # Iniciar en el primer paso

    paso = PASO_CLIENTE[cliente_id]

    if paso == 1:
        PASO_CLIENTE[cliente_id] = 2
        return "¬°Hola! üòä Soy Sandra, tu asistente. ¬øDesde qu√© ciudad nos escribes?"

    elif paso == 2:
        PASO_CLIENTE[cliente_id] = 3
        return ("üìç Enviamos a toda Colombia con *pago contra entrega*. üöö Ciudades principales: 1-4 d√≠as h√°biles. "
                "Poblaciones alejadas: 5-8 d√≠as. ¬øQuieres conocer los precios?")

    elif paso == 3:
        PASO_CLIENTE[cliente_id] = 4
        return ("üî• Opciones de compra:\n"
                "1Ô∏è‚É£ *1 Cafetera Espresso Pro* ‚Äì *$399,900 COP* üöö\n"
                "2Ô∏è‚É£ *2 Cafeteras Espresso Pro* ‚Äì *$749,900 COP* üöö\n"
                "üì¶ Env√≠o GRATIS a toda Colombia.\n"
                "¬øPara qu√© tipo de caf√© la necesitas? ‚òï")

    elif paso == 4:
        PASO_CLIENTE[cliente_id] = 5
        return ("‚ú® Esta cafetera es ideal para espresso, capuchino y caf√© con leche. "
                "Tiene *pantalla t√°ctil*, *vaporizador de leche* y *presi√≥n profesional*.\n"
                "üëâ ¬øTe gustar√≠a recibirla con *pago contra entrega*?")

    elif paso == 5:
        PASO_CLIENTE[cliente_id] = 6
        return ("¬°Genial! Para procesar tu pedido, necesito estos datos:\n"
                "1Ô∏è‚É£ Nombre üòä\n"
                "2Ô∏è‚É£ Tel√©fono üìû\n"
                "3Ô∏è‚É£ Ciudad üèô\n"
                "4Ô∏è‚É£ Direcci√≥n üè°\n"
                "5Ô∏è‚É£ Cantidad de cafeteras üì¶")

    elif paso == 6:
        # Guardamos los datos del cliente
        if cliente_id not in DATOS_CLIENTE:
            DATOS_CLIENTE[cliente_id] = {}

        if "tel√©fono" not in DATOS_CLIENTE[cliente_id] and mensaje.isdigit():
            DATOS_CLIENTE[cliente_id]["tel√©fono"] = mensaje
            return "üìû Gracias. Ahora dime tu *ciudad*."

        if "ciudad" not in DATOS_CLIENTE[cliente_id]:
            DATOS_CLIENTE[cliente_id]["ciudad"] = mensaje
            return "üìç ¬øCu√°l es tu direcci√≥n exacta para el env√≠o? üè°"

        if "direcci√≥n" not in DATOS_CLIENTE[cliente_id]:
            DATOS_CLIENTE[cliente_id]["direcci√≥n"] = mensaje
            return "üì¶ ¬øCu√°ntas cafeteras deseas pedir? (1 o 2)"

        if "cantidad" not in DATOS_CLIENTE[cliente_id] and mensaje.isdigit():
            DATOS_CLIENTE[cliente_id]["cantidad"] = mensaje
            pedido = DATOS_CLIENTE.pop(cliente_id)
            return (f"‚úÖ ¬°Gracias! Tu pedido de *{pedido['cantidad']}* Cafetera(s) ser√° enviado a:\n"
                    f"üè† {pedido['direcci√≥n']}, {pedido['ciudad']}.\n"
                    f"üìû Te contactaremos al {pedido['tel√©fono']} para confirmar.\n"
                    "üöö *Pago contra entrega*. ¬°Disfruta tu caf√©! ‚òï‚ú®")

    return "ü§ñ ¬øTienes alguna otra pregunta antes de proceder con el pedido? üòâ"


# ---------------------------
# üîÑ FUNCIONALIDAD DE GANCHO
# ---------------------------
def verificar_inactividad():
    """Verifica cada minuto si hay clientes inactivos y les env√≠a un mensaje gancho."""
    while True:
        time.sleep(60)  # Revisi√≥n cada 60 segundos
        ahora = datetime.now()
        for cliente_id, ultima_interaccion in list(ULTIMA_INTERACCION.items()):
            if ahora - ultima_interaccion > timedelta(minutes=5):  # Si pasaron 5 min sin respuesta
                mensaje_gancho = GANCHOS[hash(cliente_id) % len(GANCHOS)]  # Mensaje aleatorio
                enviar_mensaje(cliente_id, mensaje_gancho)  # Simulaci√≥n de env√≠o
                del ULTIMA_INTERACCION[cliente_id]  # Eliminamos para evitar env√≠os repetidos

def enviar_mensaje(cliente_id, mensaje):
    """Simula el env√≠o de un mensaje de seguimiento."""
    print(f"üì¢ Enviando mensaje a {cliente_id}: {mensaje}")

# Iniciar el verificador en segundo plano
hilo_verificador = threading.Thread(target=verificar_inactividad, daemon=True)
hilo_verificador.start()
